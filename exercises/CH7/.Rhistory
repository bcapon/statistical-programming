}
}
}
f.zeroed(-1000,1000,g,a=1,b=1)
f1 <- function(x){
return(log(x) - (1/x))
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f0 <- f(x0,...);f1 <- f(x1,...)
print(f0, f1)
if (f0==0) return(x0)
if (f1==0) return(x1)
# We want to exit if the interval doesn't contain a sol'n
if (f0*f1>0) stop("Interval does not appear to bracket solution")
x_t <- 1 # Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- (x0 + x1) / 2 # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
}
f.zeroed(-1000,1000,g,a=1,b=1)
f1 <- function(x){
return(log(x) - (1/x))
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f0 <- f(x0,...);f1 <- f(x1,...)
print(f0, f1)
#if (f0==0) return(x0)
#if (f1==0) return(x1)
# We want to exit if the interval doesn't contain a sol'n
#if (f0*f1>0) stop("Interval does not appear to bracket solution")
x_t <- 1 # Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- (x0 + x1) / 2 # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
}
f.zeroed(-1000,1000,g,a=1,b=1)
f1 <- function(x){
return(log(x) - (1/x))
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- (x0 + x1) / 2 # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
}
f.zeroed(-100,100,g,a=1,b=1)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- (x0 + x1) / 2 # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
}
f.zeroed(-100,100,g,a=1,b=2)
f1 <- function(x){
return(log(x) - (1/x))
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
print(f(x0,..))
#while(abs(f(x_t,...)) > 10**-10){
#  x_t <- (x0 + x1) / 2 # Could also use mean here
#  print(f(x_t,...))
# if(f(x_t,...) > 0){
#   x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
print(f(x0,..))
#while(abs(f(x_t,...)) > 10**-10){
#  x_t <- (x0 + x1) / 2 # Could also use mean here
#  print(f(x_t,...))
# if(f(x_t,...) > 0){
#   x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
f.zeroed(-100,100,g,a=1,b=2)
f1 <- function(x){
return(log(x) - (1/x))
}
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
print(f(x0,...))
#while(abs(f(x_t,...)) > 10**-10){
#  x_t <- (x0 + x1) / 2 # Could also use mean here
#  print(f(x_t,...))
# if(f(x_t,...) > 0){
#   x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
f.zeroed(-100,100,g,a=1,b=2)
g(-100,1,2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
x_t <- 1 # Initialisation
print(f(x0,...))
print(f(x1,...))
#while(abs(f(x_t,...)) > 10**-10){
#  x_t <- (x0 + x1) / 2 # Could also use mean here
#  print(f(x_t,...))
# if(f(x_t,...) > 0){
#   x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
# }else{
#   x0 <- x_t
# }
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
f(x_t)
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x){
return(log(x) - (1/x))
}
g <- function(x,a,b) {
return(x**b - exp(a*x) + 2)
}
f.zeroed <- function(x0,x1,f,...){
f_x0 <- f(x0)
f_x1 <- f(x1)
if(f_x1 > f_x0){
sign <- +1
}else{
sign <- -1
}
x_t <- 1# Initialisation
f(x_t)
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
if(f(x_t,...) > 0){
x1 <- x_t
}else{
x0 <- x_t
}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
}
f.zeroed(-100,100,g,a=1,b=2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
}
f.zeroed(c(-10,10),g,a=1,b=2)
g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
}
f.zeroed(c(-10,10),g,a=1,b=2)
#g(100,1,2)
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
}
f.zeroed(c(-10,10),g,a=1,b=2)
#g(100,1,2)
source("~/GitHub/extended-statistical-programming/CH5/Q10.R")
f1 <- function(x) (log(x) - (1/x))
g <- function(x,a,b) (x**b - exp(a*x) + 2)
f.zeroed <- function(interval,f,...){
x0 <- interval[1]; x1 <- interval[2]
f_x0 <- f(x0,..)
f_x1 <- f(x1,...)
if(f_x1*f_x0 > 0) stop("Interval does not appear to bracket solution")
up <- sign(f_x1)
x_t <- 1# Initialisation
while(abs(f(x_t,...)) > 10**-10){
x_t <- mean(x0,x1) # Could also use mean here
print(f(x_t,...))
#if(f(x_t,...) > 0){
# x1 <- x_t
#}else{
# x0 <- x_t
#}
}
}
f.zeroed(c(-10,10),g,a=1,b=2)
#g(100,1,2)
